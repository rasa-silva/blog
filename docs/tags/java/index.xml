<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on rasa-silva</title>
    <link>https://rasa-silva.github.io/blog/tags/java/</link>
    <description>Recent content in Java on rasa-silva</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>rasa.silva@gmail.com (Ricardo Silva)</managingEditor>
    <webMaster>rasa.silva@gmail.com (Ricardo Silva)</webMaster>
    <lastBuildDate>Tue, 23 Jan 2018 18:34:51 +0000</lastBuildDate>
    
	<atom:link href="https://rasa-silva.github.io/blog/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Data and behavior</title>
      <link>https://rasa-silva.github.io/blog/posts/go_testing/</link>
      <pubDate>Tue, 23 Jan 2018 18:34:51 +0000</pubDate>
      <author>rasa.silva@gmail.com (Ricardo Silva)</author>
      <guid>https://rasa-silva.github.io/blog/posts/go_testing/</guid>
      <description>On my Go learning journey, after looking at &amp;lsquo;Dependency Management&amp;rsquo;, I started looking into testing&amp;hellip;
I&amp;rsquo;ve decided that doing a basic GitHub client to fetch updates from my favorite repos was a nice little experiment to start with&amp;hellip;
That said, part of the first run at implementing this was something like
func fetchCommits(repoName string) ([]commit, error) { url := fmt.Sprintf(&amp;#34;https://api.github.com/repos/%s/commits&amp;#34;, repoName) body, err := fetch(url) if err != nil { return nil, err } var commits []commit if err := json.</description>
    </item>
    
  </channel>
</rss>